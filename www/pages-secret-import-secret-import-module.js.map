{"version":3,"sources":["./src/app/pages/secret-import/secret-import.page.ts","./src/app/pages/secret-import/secret-import.page.html","./src/app/pages/secret-import/secret-import.module.ts","./src/app/components/mnemonic-keyboard/mnemonic-keyboard.component.ts","./src/app/components/mnemonic-keyboard/mnemonic-keyboard.component.html"],"names":[],"mappings":"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","file":"pages-secret-import-secret-import-module.js","sourcesContent":["import { Component } from '@angular/core'\nimport { AlertController } from '@ionic/angular'\n\nimport { BIPSigner } from '../../models/BIP39Signer'\nimport { MnemonicSecret } from '../../models/secret'\nimport { DeviceService } from '../../services/device/device.service'\nimport { ErrorCategory, handleErrorLocal } from '../../services/error-handler/error-handler.service'\nimport { NavigationService } from '../../services/navigation/navigation.service'\n\nimport * as bip39 from 'bip39'\nimport { Observable, Subject } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\ntype SingleWord = string\n\n@Component({\n  selector: 'airgap-secret-import',\n  templateUrl: './secret-import.page.html',\n  styleUrls: ['./secret-import.page.scss']\n})\nexport class SecretImportPage {\n  public secretWords: string[] = []\n  public secretWordsValid: Observable<boolean>\n  public selectedWordIndex: number = 0\n  public selectedWord: string = ''\n\n  public maskWords: boolean = false\n\n  public wordList: SingleWord[] = bip39.wordlists.EN as any\n\n  public lastWordOptions: string[] = []\n\n  public setWordEmitter: Subject<string> = new Subject()\n\n  constructor(\n    private readonly deviceService: DeviceService,\n    private readonly navigationService: NavigationService,\n    private readonly alertController: AlertController\n  ) {\n    this.secretWordsValid = this.setWordEmitter.pipe(\n      map(() => {\n        return this.isValid()\n      })\n    )\n  }\n\n  selectWord(index: number) {\n    console.log(index)\n    this.selectedWordIndex = index\n    this.selectedWord = this.secretWords[this.selectedWordIndex]\n\n    if (this.selectedWordIndex === 0 && !this.selectedWord) {\n      this.selectedWordIndex = -1\n    }\n\n    this.setWordEmitter.next(this.selectedWord ?? '')\n  }\n\n  wordSelected(word: string | undefined) {\n    if (typeof word === 'undefined') {\n      if (this.selectedWordIndex >= 0) {\n        this.secretWords.splice(this.selectedWordIndex, 1)\n        this.selectWord(Math.max(this.selectedWordIndex - 1, 0))\n      } else if (this.selectedWordIndex === -1) {\n        this.selectWord(this.secretWords.length - 1)\n      }\n      return\n    }\n\n    if (this.selectedWordIndex === -1) {\n      this.secretWords.push(word)\n    } else {\n      this.secretWords[this.selectedWordIndex] = word\n    }\n\n    this.selectedWordIndex = -1\n    this.selectedWord = ''\n\n    this.getLastWord()\n\n    this.setWordEmitter.next(this.selectedWord ?? '')\n  }\n\n  public ionViewDidEnter(): void {\n    this.deviceService.enableScreenshotProtection({ routeBack: 'secret-setup' })\n  }\n\n  public ionViewWillLeave(): void {\n    this.deviceService.disableScreenshotProtection()\n  }\n\n  public isValid(): boolean {\n    return BIPSigner.validateMnemonic(this.secretWords.join(' '))\n  }\n\n  public goToSecretSetupPage(): void {\n    const signer: BIPSigner = new BIPSigner()\n    const secret: MnemonicSecret = new MnemonicSecret(signer.mnemonicToEntropy(BIPSigner.prepareMnemonic(this.secretWords.join(' '))))\n    this.navigationService.routeWithState('secret-add', { secret }).catch(handleErrorLocal(ErrorCategory.IONIC_NAVIGATION))\n  }\n\n  public async paste(text: string | undefined) {\n    if (BIPSigner.validateMnemonic(text)) {\n      this.secretWords = text.split(' ')\n      this.selectedWordIndex = -1\n      this.selectedWord = ''\n      this.setWordEmitter.next(this.selectedWord ?? '')\n    } else {\n      const alert = await this.alertController.create({\n        header: 'Invalid Mnemonic',\n        message: 'The text in your clipboard is not a valid mnemonic.',\n        backdropDismiss: false,\n        buttons: [\n          {\n            text: 'Ok'\n          }\n        ]\n      })\n      alert.present()\n    }\n  }\n\n  public async mask(enabled: boolean) {\n    this.maskWords = enabled\n  }\n\n  public getLastWord() {\n    const options = []\n    if (this.secretWords.length === 23) {\n      // The last word is 3 bits entropy and 8 bits checksum of the entropy. But because there are only 2048 words, it's fast to just try all combinations and the code is a lot easier, so we do that.\n      for (const word of bip39.wordlists.EN) {\n        if (bip39.validateMnemonic([...this.secretWords, word].join(' '))) {\n          options.push(word)\n          console.log('LAST WORD', word)\n        }\n      }\n    }\n    this.lastWordOptions = options\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar transparent>\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"/secret-setup\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>{{ 'secret-import.title' | translate }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-no-padding\">\n  <label class=\"ion-padding-horizontal\">Select the correct word for this position.</label>\n\n  <ion-row class=\"secret--container-45 ion-align-items-center\">\n    <ion-col>\n      <ion-row class=\"secret--container__inner ion-justify-content-center\">\n        <ng-container *ngFor=\"let word of secretWords; index as i\">\n          <ion-button\n            style=\"max-width: 75px; min-width: 60px;\"\n            shape=\"round\"\n            size=\"small\"\n            [class.btn-current]=\"i === selectedWordIndex\"\n            class=\"typography--mono\"\n            [color]=\"i === selectedWordIndex ? 'transparent' : 'tertiary'\"\n            (click)=\"selectWord(i)\"\n          >\n            {{ maskWords ? '***' : word }}\n          </ion-button>\n        </ng-container>\n        <ion-button\n          *ngIf=\"secretWords.length < 24\"\n          style=\"max-width: 75px; min-width: 60px;\"\n          shape=\"round\"\n          size=\"small\"\n          [class.btn-blank]=\"selectedWordIndex !== -1\"\n          [class.btn-current]=\"selectedWordIndex === -1\"\n          class=\"typography--mono\"\n          [color]=\"'transparent'\"\n          (click)=\"selectWord(-1)\"\n        ></ion-button>\n      </ion-row>\n    </ion-col>\n  </ion-row>\n  <hr />\n\n  <div *ngIf=\"lastWordOptions.length > 0\">\n    <!-- TODO: Styling -->\n    To generate a valid 24 word mnemonic, one of the following words is your last word.\n    <ion-button *ngFor=\"let word of lastWordOptions\" (click)=\"wordSelected(word)\">{{word}}</ion-button>\n  </div>\n\n  <div class=\"ion-padding-horizontal\">\n    <airgap-mnemonic-keyboard\n      [setWord]=\"setWordEmitter\"\n      (wordSelected)=\"wordSelected($event)\"\n      (pasted)=\"paste($event)\"\n      (maskInput)=\"mask($event)\"\n    ></airgap-mnemonic-keyboard>\n  </div>\n\n  <ion-fab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n    <ion-button color=\"primary\" shape=\"round\" (click)=\"goToSecretSetupPage()\" [disabled]=\"!(secretWordsValid | async)\">\n      {{ 'secret-edit.confirm_label' | translate }}\n    </ion-button>\n  </ion-fab>\n</ion-content>\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { RouterModule, Routes } from '@angular/router'\nimport { IonicModule } from '@ionic/angular'\nimport { TranslateModule } from '@ngx-translate/core'\nimport { MnemonicKeyboardComponent } from 'src/app/components/mnemonic-keyboard/mnemonic-keyboard.component'\n\nimport { SecretImportPage } from './secret-import.page'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SecretImportPage\n  }\n]\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, IonicModule, RouterModule.forChild(routes), TranslateModule],\n  declarations: [SecretImportPage, MnemonicKeyboardComponent]\n})\nexport class SecretImportPageModule {}\n","import { ClipboardService } from '@airgap/angular-core'\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core'\n\nimport * as bip39 from 'bip39'\nimport { Observable, Subscription } from 'rxjs'\n\nfunction shuffle(arr: string): string {\n  const array = arr.split('')\n  let currentIndex = array.length\n  let randomIndex\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex--\n\n    // And swap it with the current element.\n    ;[array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]]\n  }\n\n  return array.join('')\n}\n\nconst ALPHABET = 'qwertyuiopasdfghjklzxcvbnm'\n\n@Component({\n  selector: 'airgap-mnemonic-keyboard',\n  templateUrl: './mnemonic-keyboard.component.html',\n  styleUrls: ['./mnemonic-keyboard.component.scss']\n})\nexport class MnemonicKeyboardComponent implements OnInit, OnDestroy {\n  public text: string = ''\n\n  @Input()\n  public setWord: Observable<string>\n\n  @Input()\n  public wordlist: string[] = bip39.wordlists.EN\n\n  @Output()\n  public wordSelected: EventEmitter<string | undefined> = new EventEmitter()\n\n  @Output()\n  public pasted: EventEmitter<string | undefined> = new EventEmitter()\n\n  _maskInput: boolean = false\n\n  @Output()\n  public maskInput: EventEmitter<boolean> = new EventEmitter()\n\n  public suggestions: string[] = []\n\n  public rows: { letter: string; enabled: boolean; active: boolean }[][]\n\n  public validLetters: string = ALPHABET\n\n  public shuffled: boolean = false\n\n  private subscriptions: Subscription = new Subscription()\n\n  constructor(private readonly clipboardService: ClipboardService) {\n    this.paintKeyboard()\n  }\n\n  ngOnInit() {\n    if (this.setWord) {\n      this.subscriptions.add(\n        this.setWord.subscribe((word) => {\n          this.setText(word)\n        })\n      )\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe()\n  }\n\n  public async paintKeyboard() {\n    if (this.wordlist) {\n      const filtered = this.wordlist.filter((word) => word.startsWith(this.text))\n\n      const numberOfItems = 3\n      this.suggestions = filtered.slice(0, numberOfItems)\n\n      const set = new Set<string>()\n      filtered.forEach((word) => {\n        set.add(word[this.text.length])\n      })\n      this.validLetters = [...set.values()].join('')\n    } else {\n      this.validLetters = ALPHABET\n    }\n\n    let alphabet = ALPHABET\n\n    const letters = (this.shuffled ? shuffle(alphabet) : alphabet).split('').map((letter) => {\n      return { letter, enabled: this.validLetters.includes(letter), active: false }\n    })\n    const firstRow = 10\n    const secondRow = 9\n    const thirdRow = 7\n    this.rows = []\n    this.rows.push(letters.splice(0, firstRow))\n    this.rows.push(letters.splice(0, secondRow))\n    this.rows.push([...letters.splice(0, thirdRow), { letter: '{backspace}', enabled: this.text.length > 0, active: false }])\n  }\n\n  public selectLetter(letter: string) {\n    if (letter === '{backspace}') {\n      this.removeLetter()\n    } else {\n      this.addLetter(letter)\n    }\n\n    this.paintKeyboard()\n  }\n\n  public selectWord(word: string) {\n    this.wordSelected.next(word)\n  }\n\n  private addLetter(char: string) {\n    this.text += char\n    const hasExactMatch = this.wordlist.filter((word) => word === this.text).length > 0\n\n    if (hasExactMatch) {\n      this.selectWord(this.text)\n    }\n  }\n\n  async removeLetter(): Promise<void> {\n    const len = this.text.length\n    this.text = this.text.substring(0, len - 1)\n  }\n\n  async toggleShuffled() {\n    this.shuffled = !this.shuffled\n    this.paintKeyboard()\n  }\n\n  async delete() {\n    this.wordSelected.next(undefined)\n  }\n\n  async setText(text: string) {\n    this.text = text\n    this.suggestions = []\n    this.paintKeyboard()\n  }\n\n  async paste() {\n    const text = await this.clipboardService.paste()\n\n    this.pasted.emit(text)\n  }\n\n  async scramble() {\n    this._maskInput = !this._maskInput\n    this.maskInput.emit(this._maskInput)\n  }\n}\n","<div class=\"input--container\">\n  <span class=\"typography--mono\">{{ text }}</span>\n</div>\n\n<ion-row class=\"suggestion--container\">\n  <!-- TODO: How many suggestions should be shown? If it's only 3, it sometimes looks like those are the only remaining options. It should either have an indication that there are more, or we show all of them in a \"slider\". -->\n  <ion-button\n    *ngFor=\"let suggestion of suggestions\"\n    shape=\"round\"\n    size=\"small\"\n    [color]=\"'primary'\"\n    class=\"typography--mono lowercase\"\n    (click)=\"selectWord(suggestion)\"\n  >\n    {{ suggestion }}\n  </ion-button>\n  <!-- TODO: If we don't have a \"placeholder\" here, the keyboard goes up and down while typing, which is bad -->\n  <ion-button *ngIf=\"suggestions.length === 0\" shape=\"round\" size=\"small\" [color]=\"'secondary'\" class=\"typography--mono lowercase\">\n    no suggestions\n  </ion-button>\n</ion-row>\n\n<div class=\"content--align__center-center\" *ngFor=\"let row of rows\">\n  <ion-button\n    *ngFor=\"let letter of row\"\n    [id]=\"'key-' + letter.letter\"\n    size=\"small\"\n    [color]=\"letter.active ? 'primary' : 'tertiary'\"\n    class=\"typography--mono lowercase\"\n    [disabled]=\"!letter.enabled\"\n    (click)=\"selectLetter(letter.letter)\"\n  >\n    <ng-container *ngIf=\"letter.letter === '{backspace}'\">\n      <ion-icon name=\"backspace-outline\"></ion-icon>\n    </ng-container>\n    <ng-container *ngIf=\"letter.letter !== '{backspace}'\">\n      <span [innerHTML]=\"letter.letter\"></span>\n    </ng-container>\n  </ion-button>\n</div>\n\n<div class=\"content--align__center-center actions--container\">\n  <ion-button (click)=\"delete()\"><ion-icon name=\"trash-outline\"></ion-icon></ion-button>\n  <ion-button (click)=\"toggleShuffled()\"><ion-icon name=\"shuffle-outline\"></ion-icon></ion-button>\n  <ion-button (click)=\"paste()\"><ion-icon name=\"clipboard-outline\"></ion-icon></ion-button>\n  <ion-button (click)=\"scramble()\"><ion-icon [name]=\"_maskInput ? 'eye-outline' : 'eye-off-outline'\"></ion-icon></ion-button>\n</div>\n"],"sourceRoot":"webpack:///"}