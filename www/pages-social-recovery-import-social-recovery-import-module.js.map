{"version":3,"sources":["./src/app/validators/mnemonic.validator.ts","./src/app/pages/social-recovery-import/social-recovery-import.module.ts","./src/app/pages/social-recovery-import/social-recovery-import.page.ts","./src/app/pages/social-recovery-import/social-recovery-import.page.html"],"names":[],"mappings":"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","file":"pages-social-recovery-import-social-recovery-import-module.js","sourcesContent":["import { FormControl } from '@angular/forms'\nimport * as bip39 from 'bip39'\n\nimport { BIPSigner } from '../models/BIP39Signer'\n\nexport class MnemonicValidator {\n  public static checkMnemonic(mnemonic: string, wordlist: string): void {\n    const words: string[] = BIPSigner.prepareMnemonic(mnemonic).split(' ')\n\n    if (words.length % 3 !== 0) {\n      throw new Error('invalid secret')\n    }\n\n    words.forEach((word: string) => {\n      const index: number = wordlist.indexOf(word)\n      if (index === -1) {\n        throw new Error('invalid secret')\n      }\n    })\n  }\n\n  public static isValidShare(control: FormControl): { [key: string]: boolean } | null {\n    try {\n      MnemonicValidator.checkMnemonic(control.value, bip39.wordlists.EN as any) // TODO: Fix typing (check what it actually is)\n    } catch (e) {\n      return {\n        'not a social mnemonic share': true\n      }\n    }\n\n    return null\n  }\n\n  public static isValid(control: FormControl): { [key: string]: boolean } | null {\n    if (control.value && BIPSigner.validateMnemonic(control.value)) {\n      return null\n    }\n\n    return {\n      'not a mnemonic': true\n    }\n  }\n}\n","import { CommonModule } from '@angular/common'\nimport { NgModule } from '@angular/core'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { RouterModule, Routes } from '@angular/router'\nimport { IonicModule } from '@ionic/angular'\nimport { TranslateModule } from '@ngx-translate/core'\n\nimport { SocialRecoveryImportPage } from './social-recovery-import.page'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SocialRecoveryImportPage\n  }\n]\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, IonicModule, RouterModule.forChild(routes), TranslateModule],\n  declarations: [SocialRecoveryImportPage]\n})\nexport class SocialRecoveryImportPageModule {}\n","import { Component } from '@angular/core'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'\n\nimport { MnemonicSecret } from '../../models/secret'\nimport { DeviceService } from '../../services/device/device.service'\nimport { ErrorCategory, handleErrorLocal } from '../../services/error-handler/error-handler.service'\nimport { NavigationService } from '../../services/navigation/navigation.service'\nimport { MnemonicValidator } from '../../validators/mnemonic.validator'\n\n@Component({\n  selector: 'airgap-social-recovery-import',\n  templateUrl: './social-recovery-import.page.html',\n  styleUrls: ['./social-recovery-import.page.scss']\n})\nexport class SocialRecoveryImportPage {\n  public numberOfShares: number\n  public shares: string[]\n\n  public socialRecoveryForm: FormGroup\n\n  constructor(\n    private readonly deviceService: DeviceService,\n    private readonly navigationService: NavigationService,\n    public formBuilder: FormBuilder\n  ) {\n    this.setNumberOfShares(2)\n  }\n\n  public ionViewDidEnter(): void {\n    this.deviceService.enableScreenshotProtection({ routeBack: 'secret-setup' })\n  }\n\n  public ionViewWillLeave(): void {\n    this.deviceService.disableScreenshotProtection()\n  }\n\n  public setNumberOfShares(i: number): void {\n    this.numberOfShares = i\n    this.shares = Array(i)\n\n    const formGroup = {}\n\n    this.getNumberArray(i).forEach((i) => {\n      formGroup['share_' + i.toString()] = ['', Validators.compose([Validators.required, MnemonicValidator.isValidShare])]\n      if (this.socialRecoveryForm && this.socialRecoveryForm.value['share_' + i.toString()]) {\n        formGroup['share_' + i.toString()][0] = this.socialRecoveryForm.value['share_' + i.toString()]\n      }\n    })\n\n    this.socialRecoveryForm = this.formBuilder.group(formGroup)\n  }\n\n  public recover(): void {\n    try {\n      const secretString: string = MnemonicSecret.recoverSecretFromShares(this.shares)\n      this.navigationService\n        .routeWithState('secret-add', { secret: new MnemonicSecret(secretString, 'Recovery by Social Recovery') })\n        .catch(handleErrorLocal(ErrorCategory.IONIC_NAVIGATION))\n    } catch (error) {\n      console.log('oops')\n    }\n  }\n\n  public back(): void {\n    this.navigationService.back()\n  }\n\n  public getNumberArray(numberOfElements: number): number[] {\n    return Array(numberOfElements)\n      .fill(0)\n      .map((_value: number, index: number) => index)\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"/secret-setup\"></ion-back-button>\n    </ion-buttons>\n    <ion-title>{{ 'social-recovery-import.title' | translate }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-padding\">\n  <p class=\"ion-padding-bottom\">{{ 'social-recovery-import.text' | translate }}</p>\n\n  <p class=\"font--weight__med\">{{ 'social-recovery-import.share-recovery.heading' | translate }}</p>\n\n  <ion-row class=\"button--rounded\">\n    <ion-button\n      shape=\"round\"\n      *ngFor=\"let i of [2, 3, 4, 5, 6]\"\n      color=\"secondary-light\"\n      (click)=\"setNumberOfShares(i)\"\n      [color]=\"i === numberOfShares ? 'primary' : 'tertiary'\"\n    >\n      {{ i }}\n    </ion-button>\n  </ion-row>\n\n  <ion-list *ngIf=\"shares\">\n    <form [formGroup]=\"socialRecoveryForm\">\n      <ion-item *ngFor=\"let i of getNumberArray(numberOfShares)\" class=\"ion-no-padding ion-margin-bottom\">\n        <ion-label color=\"primary\" position=\"stacked\">\n          {{ 'social-recovery-import.share-recovery.label' | translate }} {{ i + 1 }}\n        </ion-label>\n        <ion-textarea [formControlName]=\"'share_' + i\" placeholder=\"duck goose dinosaur ...\" [(ngModel)]=\"shares[i]\"></ion-textarea>\n      </ion-item>\n    </form>\n  </ion-list>\n\n  <ion-fab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">\n    <ion-button color=\"primary\" shape=\"round\" (click)=\"recover()\" [disabled]=\"!socialRecoveryForm.valid\">\n      {{ 'social-recovery-import.recover_label' | translate }}\n    </ion-button>\n  </ion-fab>\n</ion-content>\n"],"sourceRoot":"webpack:///"}