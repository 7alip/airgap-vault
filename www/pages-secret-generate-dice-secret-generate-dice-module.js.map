{"version":3,"sources":["./src/app/pages/secret-generate-dice/secret-generate-dice.module.ts","./src/app/pages/secret-generate-dice/secret-generate-dice.page.ts","./src/app/pages/secret-generate-dice/secret-generate-dice.page.html","./src/app/pages/secret-generate-dice/secret-generate-dice-routing.module.ts","./src/app/services/dice-roll/dice-roll.service.ts"],"names":[],"mappings":"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","file":"pages-secret-generate-dice-secret-generate-dice-module.js","sourcesContent":["import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { FormsModule } from '@angular/forms'\n\nimport { IonicModule } from '@ionic/angular'\n\nimport { SecretGenerateDicePageRoutingModule } from './secret-generate-dice-routing.module'\n\nimport { SecretGenerateDicePage } from './secret-generate-dice.page'\nimport { TranslateModule } from '@ngx-translate/core'\nimport { ComponentsModule } from 'src/app/components/components.module'\n\n@NgModule({\n  imports: [CommonModule, ComponentsModule, FormsModule, IonicModule, SecretGenerateDicePageRoutingModule, TranslateModule],\n  declarations: [SecretGenerateDicePage]\n})\nexport class SecretGenerateDicePageModule {}\n","import { Component, OnInit, ViewChild } from '@angular/core'\nimport { AlertController, IonContent } from '@ionic/angular'\nimport { TranslateService } from '@ngx-translate/core'\nimport { MnemonicSecret } from 'src/app/models/secret'\nimport { DiceRollService, DiceRollType } from 'src/app/services/dice-roll/dice-roll.service'\nimport { ErrorCategory, handleErrorLocal } from 'src/app/services/error-handler/error-handler.service'\nimport { NavigationService } from 'src/app/services/navigation/navigation.service'\n\n@Component({\n  selector: 'airgap-secret-generate-dice',\n  templateUrl: './secret-generate-dice.page.html',\n  styleUrls: ['./secret-generate-dice.page.scss']\n})\nexport class SecretGenerateDicePage implements OnInit {\n  @ViewChild(IonContent, { static: false }) content: IonContent\n\n  public isValid: boolean = false\n\n  public minLength: number = 99\n\n  public error: string = ''\n\n  public entropyBits: number = 0\n\n  public diceRollType: DiceRollType = DiceRollType.DEFAULT\n\n  private entropy: string = ''\n\n  constructor(\n    private readonly alertController: AlertController,\n    private readonly translateService: TranslateService,\n    private readonly navigationService: NavigationService,\n    private readonly diceRollService: DiceRollService\n  ) {}\n\n  ngOnInit() {}\n\n  async next() {\n    const entropy = await this.diceRollService.getEntropyFromInput(this.entropy, this.diceRollType)\n\n    const secret: MnemonicSecret = new MnemonicSecret(entropy)\n\n    this.navigationService.routeWithState('secret-rules', { secret }).catch(handleErrorLocal(ErrorCategory.IONIC_NAVIGATION))\n  }\n\n  async updateEntropy(input: string) {\n    this.entropy = input\n    this.entropyBits = 2.585 * this.entropy.length\n    this.validateEntropy()\n  }\n\n  async validateEntropy() {\n    if (this.entropy.length < 99) {\n      this.isValid = false\n      this.error = ''\n      return\n    }\n\n    try {\n      this.isValid = await this.diceRollService.validateInput(this.entropy)\n    } catch (e) {\n      this.isValid = false\n      this.error = e\n    }\n  }\n\n  async switchInputType() {\n    if (this.diceRollType === DiceRollType.DEFAULT) {\n      this.diceRollType = DiceRollType.COLDCARD\n    } else {\n      this.diceRollType = DiceRollType.DEFAULT\n    }\n  }\n\n  scrollToBottom() {\n    this.content.scrollToBottom(500)\n  }\n\n  async selectInputType() {\n    const alert = await this.alertController.create({\n      header: this.translateService.instant('secret-generate-dice-roll.type-alert.header'),\n      message: this.translateService.instant('secret-generate-dice-roll.type-alert.message'),\n      backdropDismiss: false,\n      inputs: [\n        {\n          name: 'default',\n          type: 'radio',\n          label: this.translateService.instant('secret-generate-dice-roll.type-alert.default'),\n          value: DiceRollType.DEFAULT,\n          checked: this.diceRollType === DiceRollType.DEFAULT\n        },\n        {\n          name: 'coldcard',\n          type: 'radio',\n          label: this.translateService.instant('secret-generate-dice-roll.type-alert.coldcard'),\n          value: DiceRollType.COLDCARD,\n          checked: this.diceRollType === DiceRollType.COLDCARD\n        }\n      ],\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel'\n        },\n        {\n          text: 'Ok',\n          handler: async (result: DiceRollType) => {\n            this.diceRollType = result\n          }\n        }\n      ]\n    })\n    alert.present()\n  }\n}\n","<ion-header class=\"ion-no-border\">\n  <ion-toolbar color=\"secondary\">\n    <ion-buttons slot=\"start\">\n      <ion-back-button defaultHref=\"/tabs/tab-settings\"></ion-back-button>\n    </ion-buttons>\n\n    <ion-title>{{ 'secret-generate-dice-roll.title' | translate }}</ion-title>\n    <ion-buttons slot=\"end\" (click)=\"selectInputType()\">\n      <ion-icon slot=\"icon-only\" name=\"options-outline\"></ion-icon>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-padding-horizontal\">\n  <p class=\"ion-padding-bottom\">\n    {{ 'secret-generate-dice-roll.description' | translate }}\n  </p>\n\n  <airgap-grid-input\n    #inputgrid\n    [minLength]=\"minLength\"\n    [gridWidth]=\"10\"\n    [defaultHeight]=\"10\"\n    (rowAddedEvent)=\"scrollToBottom()\"\n    (entropyChanged)=\"updateEntropy($event)\"\n  ></airgap-grid-input>\n</ion-content>\n\n<ion-footer class=\"ion-no-border\">\n  <ion-toolbar>\n    <ion-row class=\"ion-padding\">\n      <ion-col size=\"12\">\n        {{ 'secret-generate-dice-roll.status' | translate: { inputLength: inputgrid.entropy.length, entropyBits: (entropyBits |\n        number:'1.0-1') } }}\n      </ion-col>\n\n      <ion-col size=\"12\">\n        <ion-row class=\"button--rounded ion-justify-content-between\">\n          <div>\n            <ion-button shape=\"round\" (click)=\"inputgrid.add('1')\">1</ion-button>\n            <ion-button shape=\"round\" (click)=\"inputgrid.add('2')\">2</ion-button>\n            <ion-button shape=\"round\" (click)=\"inputgrid.add('3')\">3</ion-button>\n            <ion-button shape=\"round\" (click)=\"inputgrid.add('4')\">4</ion-button>\n            <ion-button shape=\"round\" (click)=\"inputgrid.add('5')\">5</ion-button>\n            <ion-button shape=\"round\" (click)=\"inputgrid.add('6')\">6</ion-button>\n          </div>\n\n          <div>\n            <ion-button color=\"tertiary\" [disabled]=\"inputgrid.entropy.length === 0\" (click)=\"inputgrid.remove()\">\n              <ion-icon name=\"trash-outline\"></ion-icon>\n            </ion-button>\n            <ion-button color=\"tertiary\" [disabled]=\"!this.isValid\" (click)=\"next()\">\n              <ion-icon name=\"chevron-forward-circle-outline\"></ion-icon>\n            </ion-button>\n          </div>\n        </ion-row>\n        <ion-row></ion-row>\n      </ion-col>\n    </ion-row>\n  </ion-toolbar>\n</ion-footer>\n","import { NgModule } from '@angular/core'\nimport { Routes, RouterModule } from '@angular/router'\n\nimport { SecretGenerateDicePage } from './secret-generate-dice.page'\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SecretGenerateDicePage\n  }\n]\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SecretGenerateDicePageRoutingModule {}\n","import { Injectable } from '@angular/core'\nimport * as createHash from 'create-hash'\nimport { toHexString } from 'src/app/utils/utils'\n\nexport enum DiceRollType {\n  DEFAULT = 0, // Iancoleman, Cobo Vault\n  COLDCARD = 1\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DiceRollService {\n  private readonly emptyEntropy = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n  constructor() {}\n\n  async transformEntropy(diceEntropy: string, type: DiceRollType): Promise<string> {\n    if (type === DiceRollType.COLDCARD) {\n      return diceEntropy.replace(/6/g, '0')\n    }\n    return diceEntropy\n  }\n\n  async validateInput(diceEntropy: string): Promise<boolean> {\n    if (typeof diceEntropy !== 'string') {\n      throw Error('Input needs to be a string')\n    }\n    if (diceEntropy.length < 99) {\n      throw Error('Input length needs to be longer than 99')\n    }\n    if (!diceEntropy.split('').every((c) => '123456'.includes(c))) {\n      throw Error('Input can only contain \"1\", \"2\", \"3\", \"4\", \"5\" and \"6\"')\n    }\n\n    return true\n  }\n\n  async getEntropyFromInput(diceEntropy: string, type: DiceRollType = DiceRollType.DEFAULT): Promise<string> {\n    if (!(await this.validateInput(diceEntropy))) {\n      throw new Error('Invalid diceEntropy')\n    }\n\n    const transformedEntropy = await this.transformEntropy(diceEntropy, type)\n\n    const hash: Uint8Array = createHash('sha256').update(transformedEntropy).digest()\n\n    const entropy = toHexString(hash)\n\n    if (entropy === this.emptyEntropy) {\n      throw new Error('Warning! Input is emtpy')\n    }\n\n    return entropy\n  }\n}\n"],"sourceRoot":"webpack:///"}