{"version":3,"sources":["./node_modules/@capacitor/app-launcher/dist/esm/web.js","./node_modules/@capacitor/filesystem/dist/esm/web.js","./node_modules/@capacitor/app/dist/esm/web.js","./node_modules/@capacitor/splash-screen/dist/esm/web.js"],"names":["AppLauncherWeb","_options","value","options","window","open","url","completed","WebPlugin","resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","index","FilesystemWeb","arguments","DB_VERSION","DB_NAME","_writeCmds","_db","undefined","unavailable","Promise","reject","request","indexedDB","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","store","objectStore","req","indexName","directory","uriPath","cleanedUriPath","replace","fsPath","clear","getPath","dbRequest","entry","Error","data","content","doRecursive","recursive","occupiedEntry","type","encoding","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","now","Date","pathObj","folder","size","ctime","mtime","uri","dbIndexRequest","IDBKeyRange","only","entries","depth","match","fullPath","readdir","readDirResult","files","entryPath","stat","entryObj","deleteFile","rmdir","names","map","e","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","readFile","file","writeFile","contents","filename","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","_debug","AppWeb","handleVisibilityChange","isActive","document","hidden","notifyListeners","addEventListener","unimplemented","SplashScreenWeb"],"mappings":"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","file":"web.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class AppLauncherWeb extends WebPlugin {\n    async canOpenUrl(_options) {\n        return { value: true };\n    }\n    async openUrl(options) {\n        window.open(options.url, '_blank');\n        return { completed: true };\n    }\n}\n//# sourceMappingURL=web.js.map","import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const data = options.data;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw 'The supplied path is a directory.';\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        // const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw 'The supplied path is a directory.';\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (occupiedEntry !== undefined) {\n            data = occupiedEntry.content + data;\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const names = entries.map(e => {\n            return e.substring(path.length + 1);\n        });\n        return { files: names };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        return this._copy(options, true);\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return;\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map","import { WebPlugin } from '@capacitor/core';\nexport class AppWeb extends WebPlugin {\n    constructor() {\n        super();\n        this.handleVisibilityChange = () => {\n            const data = {\n                isActive: document.hidden !== true,\n            };\n            this.notifyListeners('appStateChange', data);\n        };\n        document.addEventListener('visibilitychange', this.handleVisibilityChange, false);\n    }\n    exitApp() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getInfo() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getLaunchUrl() {\n        return { url: '' };\n    }\n    async getState() {\n        return { isActive: document.hidden !== true };\n    }\n}\n//# sourceMappingURL=web.js.map","import { WebPlugin } from '@capacitor/core';\nexport class SplashScreenWeb extends WebPlugin {\n    async show(_options) {\n        return undefined;\n    }\n    async hide(_options) {\n        return undefined;\n    }\n}\n//# sourceMappingURL=web.js.map"],"sourceRoot":"webpack:///"}